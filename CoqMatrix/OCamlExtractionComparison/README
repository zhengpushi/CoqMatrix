Issues when testing extracted Ocaml program from matrix theory.

################################################################################
Section 1: Introduction and Usage
1. Introduction
a. extract Ocaml program from matrix models matrix.v to matrix.ml
b. bootstrap program test.ml
2. Purpose
   use a relatively large scale (almost 10^3 ~ 10^5) matrix to perform matrix operation,
   especially use matrix multiplication.
   Then, count the space and time occupied by the operation
3. build instructions
$ bash make_manually
$ ./matrix
4. test instructions and the test report, see ocaml-extraction-comparison.pdf

################################################################################
Section 2: Notes for Compile Error

--------------------------------------------------------------------------------
find compile error of matrix.ml file, note that in REPL has no error
a. manually change R_abst, R_repr in ml file to __

module type RbaseSymbolsSig =
 sig
  type coq_R

  val coq_Rabst : __
                    (* cReal -> coq_R *)

  val coq_Rrepr : __
                    (* coq_R -> cReal *)

meanwhile, fix it in corresponding mli file.

module type RbaseSymbolsSig =
 sig
  type coq_R

  val coq_Rabst : __
                    (* cReal -> coq_R *)

  val coq_Rrepr : __
                    (* coq_R -> cReal *)

b. change predT in ml file to:
let predT =
 (fun (_:'a1) -> true)

--------------------------------------------------------------------------------
the indicator such as "#use" only available in REPL, need to remove when compiling

--------------------------------------------------------------------------------
type mismatch of function l2m.
phenomenon:
	In REPL, #use "xx.ml", there is no type error.
	But when using {#load "xx.cmo"} in REPL or compile with ocamlc, we got this error message.
reason:
	the module type use coq_X type, but instantialized with float type.
solving:
	put these two files together in one file have no problem.
remark:
1. compile it use make_manully.sh
2. How to avoid errors when use polymorphism, this need more effort.
